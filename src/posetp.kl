PROGRAM posetp
%NOBUSYLAMP
%COMMENT = 'breakout TP functions'
%UNINITVARS
%NOLOCKGROUP
%NOPAUSE = COMMAND + TPENABLE + ERROR


%include systemvars.klt
%include pose_type.klt
%include pose_structs.klt
--cell position type
path_type_define(t_node,kinpos)
%undef path_type_define

%include pose.klh
%include posetp.klh
%from systemlib.klh %import VEC
-- create template for kinematics
%class kinpos('pose.klc','pose_class.klh','pose_type.klt')


--Routines needed for TP interfaces
ROUTINE posetp__groups_length
  BEGIN
    RETURN(TOTAL_GROUPS)
  END posetp__groups_length

ROUTINE posetp__posreg_type
  VAR
    pos_type : INTEGER
    num_axes  : INTEGER
    STATUS : INTEGER
  BEGIN
    POS_REG_TYPE(reg_no, grp_no, pos_type, num_axes, STATUS)
    RETURN(pos_type)
  END posetp__posreg_type

ROUTINE posetp__num_of_axes
  VAR
    pos_type : INTEGER
    num_axes  : INTEGER
    STATUS : INTEGER
  BEGIN
    POS_REG_TYPE(reg_no, grp_no, pos_type, num_axes, STATUS)
    RETURN(num_axes)
  END posetp__num_of_axes

ROUTINE posetp__get_group_xyz
  VAR
    pose : t_node
  BEGIN
    pose = kinpos__get_posreg(pr_num, grp_no)
    RETURN(pose.t_xyz)
  END posetp__get_group_xyz

ROUTINE posetp__get_group_joint
  VAR
    pose : t_node
  BEGIN
    pose = kinpos__get_posreg(pr_num, grp_no)
    RETURN(pose.t_joint)
  END posetp__get_group_joint

ROUTINE posetp__set_pr_xyz
  BEGIN
    pose__set_posreg_xyz(POS(x,y,z,w,p,r, (ZEROPOS(1).config_data)), pr_num, 1)
  END posetp__set_pr_xyz

ROUTINE posetp__set_pr_xyz_group
  BEGIN
    pose__set_posreg_xyz(POS(x,y,z,w,p,r, (ZEROPOS(1).config_data)), pr_num, grp_no)
  END posetp__set_pr_xyz_group

ROUTINE posetp__set_pr_config
  VAR
    pose : XYZWPR
  BEGIN
    --get posreg
    pose = pose__get_posreg_xyz(pr_num, grp_no)
    pose.config_data = pose__set_config(conf_str)
    pose__set_posreg_xyz(pose, pr_num, grp_no)
  END posetp__set_pr_config

ROUTINE posetp__set_pr_jpos6
  VAR
    pose : ARRAY[6] OF REAL
  BEGIN
    pose[1] = j1; pose[2] = j2; pose[3] = j3;
    pose[4] = j4; pose[5] = j5; pose[6] = j6;

    pose__set_posreg_joint(pose__set_jointpos(pose), pr_num, grp_no)
  END posetp__set_pr_jpos6

ROUTINE posetp__set_pr_jpos3
  VAR
    pose : ARRAY[3] OF REAL
  BEGIN
    pose[1] = j1; pose[2] = j2; pose[3] = j3;
    
    pose__set_posreg_joint(pose__set_jointpos(pose), pr_num, grp_no)
  END posetp__set_pr_jpos3

ROUTINE posetp__set_pr_jpos2
  VAR
    pose : ARRAY[2] OF REAL
  BEGIN
    pose[1] = j1; pose[2] = j2;
    
    pose__set_posreg_joint(pose__set_jointpos(pose), pr_num, grp_no)
  END posetp__set_pr_jpos2

ROUTINE posetp__set_pr_jpos
  BEGIN
    pose__set_posreg_joint(pose__set_jointpos_axis(1, j1), pr_num, grp_no)
  END posetp__set_pr_jpos

ROUTINE posetp__clrpr
  VAR
    pose : XYZWPR
    pose_j : JOINTPOS
    i : INTEGER
  BEGIN
    FOR i=1 TO TOTAL_GROUPS DO
      IF (GROUP_KINEMATICS(i) > 1) THEN
        pose = ZEROPOS(i)
        pose__set_posreg_xyz(pose, pr_num, i)
      ELSE
        pose_j = pose__set_jointpos_str('0,0,0,0,0,0')
        pose__set_posreg_joint(pose_j, pr_num, i)
      ENDIF
    ENDFOR
  END posetp__clrpr

ROUTINE posetp__matmul
  BEGIN
    RETURN(p1:p2)
  END posetp__matmul

ROUTINE posetp__add
  VAR
    out_p : XYZWPR
  BEGIN
    out_p.x = p1.x+p2.x ; out_p.y = p1.y+p2.y ; out_p.z = p1.z+p2.z
    out_p.w = p1.w+p2.w ; out_p.p = p1.p+p2.p ; out_p.r = p1.r+p2.r
    out_p.config_data = p1.config_data

    RETURN(out_p)
  END posetp__add

ROUTINE posetp__sub
  VAR
    out_p : XYZWPR
  BEGIN
    out_p.x = p1.x-p2.x ; out_p.y = p1.y-p2.y ; out_p.z = p1.z-p2.z
    out_p.w = p1.w-p2.w ; out_p.p = p1.p-p2.p ; out_p.r = p1.r-p2.r
    out_p.config_data = p1.config_data

    RETURN(out_p)
  END posetp__sub

ROUTINE posetp__scalar_mult
  VAR
    out_p : XYZWPR
  BEGIN
    out_p.x = value*p1.x ; out_p.y = value*p1.y ; out_p.z = value*p1.z
    out_p.w = value*p1.w ; out_p.p = value*p1.p ; out_p.r = value*p1.r 
    out_p.config_data = p1.config_data

    RETURN(out_p)
  END posetp__scalar_mult

ROUTINE posetp__scalar_divide
  VAR
    out_p : XYZWPR
  BEGIN
    out_p.x = p1.x/value ; out_p.y = p1.y/value ; out_p.z = p1.z/value
    out_p.w = p1.w/value ; out_p.p = p1.p/value ; out_p.r = p1.r/value 
    out_p.config_data = p1.config_data

    RETURN(out_p)
  END posetp__scalar_divide

ROUTINE posetp__scalar_add
  VAR
    out_p : XYZWPR
  BEGIN
    out_p.x = value+p1.x ; out_p.y = value+p1.y ; out_p.z = value+p1.z
    out_p.w = value+p1.w ; out_p.p = value+p1.p ; out_p.r = value+p1.r 
    out_p.config_data = p1.config_data

    RETURN(out_p)
  END posetp__scalar_add

ROUTINE posetp__scalar_subtract
  VAR
    out_p : XYZWPR
  BEGIN
    out_p.x = p1.x-value ; out_p.y = p1.y-value ; out_p.z = p1.z-value
    out_p.w = p1.w-value ; out_p.p = p1.p-value ; out_p.r = p1.r-value 
    out_p.config_data = p1.config_data

    RETURN(out_p)
  END posetp__scalar_subtract

ROUTINE posetp__inv
  BEGIN
    RETURN(INV((p1)))
  END posetp__inv

ROUTINE posetp__dot
  VAR
    v1, v2 : VECTOR
  BEGIN
    v1 = pose__pose_to_vector(p1)
    v2 = pose__pose_to_vector(p2)

    RETURN(v1@v2)
  END posetp__dot

ROUTINE posetp__cross
  VAR
    v1, v2 : VECTOR
    pose : XYZWPR
  BEGIN
    v1 = pose__pose_to_vector(p1)
    v2 = pose__pose_to_vector(p2)

    pose = pose__vector_to_pose(v1#v2, pose__get_orientation((ZEROPOS(1))), (ZEROPOS(1).config_data))
    RETURN(pose)
  END posetp__cross

ROUTINE posetp__frame
  BEGIN
    RETURN( FRAME((p1),(p2),(p3)) )
  END posetp__frame

ROUTINE posetp__framevec
%define DEFAULT_ORIENTATION VEC(0,0,0)
  BEGIN
    RETURN( FRAME(pose__vector_to_pose(v1, DEFAULT_ORIENTATION, (ZEROPOS(1).config_data)), 
                  pose__vector_to_pose(v2, DEFAULT_ORIENTATION, (ZEROPOS(1).config_data)), 
                  pose__vector_to_pose(v3, DEFAULT_ORIENTATION, (ZEROPOS(1).config_data)) ) )
  END posetp__framevec

ROUTINE posetp__frame4
  BEGIN
    RETURN( FRAME((p1),(p2),(p3),(p4)) )
  END posetp__frame4

ROUTINE posetp__frame4vec
%define DEFAULT_ORIENTATION VEC(0,0,0)
  BEGIN
    RETURN( FRAME(pose__vector_to_pose(v1, DEFAULT_ORIENTATION, (ZEROPOS(1).config_data)), 
                  pose__vector_to_pose(v2, DEFAULT_ORIENTATION, (ZEROPOS(1).config_data)), 
                  pose__vector_to_pose(v3, DEFAULT_ORIENTATION, (ZEROPOS(1).config_data)), 
                  pose__vector_to_pose(v4, DEFAULT_ORIENTATION, (ZEROPOS(1).config_data)) ) )
  END posetp__frame4vec

ROUTINE posetp__find_center
  VAR
    v1, v2, v3 : VECTOR
    c : T_CIRCLE
  BEGIN
    v1 = pose__pose_to_vector(p1)
    v2 = pose__pose_to_vector(p2)
    v3 = pose__pose_to_vector(p3)

    c = pose__find_circumcenter(v1, v2, v3)

    RETURN(pose__vector_to_pose(c.center, pose__get_orientation(p1), (p1.config_data)))
  END posetp__find_center

ROUTINE posetp__create_frame_from_normal
  VAR
    v1, v2 : VECTOR
  BEGIN
    v1 = pose__pose_to_vector(start_point)
    v2 = pose__pose_to_vector(end_point)
    RETURN(pose__create_frame_from_normal(v1, v2, parentfrm))
  END posetp__create_frame_from_normal

ROUTINE posetp__line_increment
  VAR
    v1, v2 : VECTOR
  BEGIN
    v1 = pose__pose_to_vector(start_point)
    v2 = pose__pose_to_vector(end_point)
    RETURN(pose__vector_to_pose(pose__line_increment(v1,v2,fraction), pose__get_orientation(start_point), start_point.config_data))
  END posetp__line_increment

BEGIN
END posetp

