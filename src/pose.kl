PROGRAM pose
%NOBUSYLAMP
%COMMENT = ''
%UNINITVARS
%NOLOCKGROUP
%NOPAUSE = COMMAND + TPENABLE + ERROR

%INCLUDE pose.klt
%INCLUDE errors.klt

%INCLUDE pose.private.klh
%INCLUDE pose.klh
%INCLUDE strings.klh

BEGIN
END pose

--private

ROUTINE CHK_STAT
BEGIN
  IF(rec_stat <> SUCCESS) AND (rec_stat <> EXISTS) THEN
      POST_ERR(rec_stat,'',0, ER_ABORT)
  ENDIF
END CHK_STAT

--***********
-- functions
--***********

ROUTINE solveIK
-- -----------
-- in: pose_in (XYZWPR), grp_no
-- return: JOINTPOS
-- desc: run IK routine on XYZWPR type to get joint angles
-- -----------
VAR
    jpos : JOINTPOS
    jpos_ref : JOINTPOS
    wjnt_cfg : CONFIG
    ext_ax : ARRAY[*] OF REAL
    STATUS : INTEGER
    frame, tool : XYZWPR
BEGIN
    -- update karel frames
    frame = getuframe(grp_no)
    tool = getutool(grp_no)
    -- get current joint rep
    jpos_ref = get_jpos(grp_no) -- needed for POS2JOINT built-in
    wjnt_cfg = pose_in.config_data
    -- run IK
    POS2JOINT(jpos_ref, (pose_in), $uframe, $utool, FULL_SOLN, wjnt_cfg, ext_ax, jpos, STATUS)
    
    IF (STATUS <> 0) THEN
        ok = FALSE
    ENDIF

    RETURN(jpos)
END solveIK

ROUTINE solveK
-- -----------
-- in: jpos (JOINTPOS), grp_no
-- return: XYZWPR
-- desc: run kinematics routine on jpos
-- -----------
VAR
    pose : POSITION
    pose2 : XYZWPR
    wjnt_cfg : CONFIG
    ext_ax : ARRAY[*] OF REAL
    STATUS : INTEGER
    frame, tool : XYZWPR
BEGIN
    -- update karel frames
    frame = getuframe(grp_no)
    tool = getutool(grp_no)
    JOINT2POS((jpos), $uframe, $utool, FULL_SOLN, pose, wjnt_cfg, ext_ax, STATUS)

    IF (STATUS <> 0) THEN
        ok = FALSE
    ENDIF

    pose2 = pose

    RETURN(pose2)
END solveK

--***********
-- setters
--***********

ROUTINE setuframe
-- -----------
-- in: frm_no, grp_no
-- out:
-- desc: Set uframe to 'frm_no'. If grp_no > 0 only frame 
--       of group is changed.
-- -----------
VAR
    entry : INTEGER
    STATUS : INTEGER
BEGIN
    ok = TRUE
    --record previous frame number
    -- for reference
    GET_VAR(entry, '*SYSTEM*', '$MNUFRAMENUM['+i_to_s(grp_no)+']', prev_ufnum, status)
    -- if grp is not initialized default to group 1
    IF (grp_no = 0) OR (UNINIT(grp_no)) THEN
        grp_no = 1
    ENDIF

    -- store current frame number in attr
    cur_ufnum = frm_no
    $MNUFRAMENUM[grp_no] = frm_no
    -- change to frame number, frm_no
    IF frm_no = 0 THEN 
        $UFRAME = $MOR_GRP[grp_no].$NILPOS
    ELSE
        $UFRAME = $MNUFRAME[grp_no,frm_no]
    ENDIF
END setuframe


ROUTINE setutool
-- -----------
-- in: frm_no, grp_no
-- out:
-- desc: Set utool to 'frm_no'. If grp_no > 0 only frame 
--       of group is changed. If grp_no is uninitialized
--       or 0, will change to 'frm_no' for all groups.
-- -----------
VAR
    entry : INTEGER
    STATUS : INTEGER
BEGIN
    ok = TRUE
    --record previous frame
    GET_VAR(entry, '*SYSTEM*', '$MNUTOOLNUM['+i_to_s(grp_no)+']', prev_utnum, status)
    -- if grp is not initialized default to group 1
    IF (grp_no = 0) OR (UNINIT(grp_no)) THEN
        grp_no = 1
    ENDIF

    -- store current frame number in attr
    cur_utnum = frm_no
    $MNUTOOLNUM[grp_no] = frm_no
    -- change to frame number, frm_no
    IF frm_no = 0 THEN
        $UTOOL = $MOR_GRP[grp_no].$NILPOS
    ELSE
        $UTOOL = $MNUTOOL[grp_no,frm_no]
    ENDIF
END setutool

ROUTINE updateframe
BEGIN
    ok = TRUE
    --sanity check frame number and group number
    --arguments
    IF (grp_no = 0) OR (UNINIT(grp_no)) THEN
        grp_no = 1
    ENDIF

    IF (frm_no = 0) OR (UNINIT(frm_no)) THEN
        ok = FALSE
        WRITE TPERROR (CR, 'Frame number is not set')
    ENDIF
    -- set xyzwpr to frame number
    $MNUFRAME[grp_no,frm_no] = frame
    -- make this frame the current frame
    setuframe(frm_no, grp_no)
END updateframe

ROUTINE updatetool
BEGIN
    ok = TRUE
    --sanity check frame number and group number
    --arguments
    IF (grp_no = 0) OR (UNINIT(grp_no)) THEN
        grp_no = 1
    ENDIF

    IF (frm_no = 0) OR (UNINIT(frm_no)) THEN
        ok = FALSE
        WRITE TPERROR (CR, 'Tool number is not set')
    ENDIF
    -- set xyzwpr to frame number
    $MNUTOOL[grp_no,frm_no] = frame
    -- make this frame the current frame
    setutool(frm_no, grp_no)
END updatetool

ROUTINE set_joint
VAR
    joint_pose : JOINTPOS9
    STATUS : INTEGER
    i : INTEGER
    r_joints : ARRAY[9] OF REAL
BEGIN
    ok = TRUE

    FOR i=1 TO ARRAY_LEN(r_joints) DO
        IF i <= ARRAY_LEN(arr) THEN
            r_joints[i] = arr[i]
        ELSE
            r_joints[i] = 0
        ENDIF
    ENDFOR

    CNV_REL_JPOS(r_joints, joint_pose, STATUS)
    CHK_STAT(STATUS)
    IF STATUS <> 0 THEN
        ok = FALSE
    ENDIF

    RETURN(joint_pose)
END set_joint


ROUTINE set_xyz
-- -----------
-- in: pose_in (ARRAY[6] OF REAL), conf_str (STRING[25])
-- desc: convert into XYZWPR type
-- -----------
VAR
    pose : XYZWPR
    STATUS : INTEGER
BEGIN
    ok = TRUE
    --store array into xyzwpr data type
    pose.x = arr[1]
    pose.y = arr[2]
    pose.z = arr[3]
    pose.w = arr[4]
    pose.p = arr[5]
    pose.r = arr[6]
    -- convert config string into config type
    CNV_STR_CONF(conf_str, pose.config_data, STATUS)
    CHK_STAT(STATUS)
    IF (STATUS <> 0) THEN
        ok = FALSE
    ENDIF

    RETURN(pose)
    
END set_xyz


ROUTINE setpr_xyz
-- -----------
-- in: pose_in (XYZWPREXT), reg_no, grp_no
-- out:
-- desc: set posreg 'reg_no' for group 'grp_no'
--       if no group is set, sets posreg for group 1.
--       wrapper for SET_POS_REG built-in. 
--       independant of pose class.
-- -----------
VAR
    STATUS : INTEGER
BEGIN
    ok = TRUE
    --default to 1 if group number is not set
    IF (grp_no = 0) OR UNINIT(grp_no) THEN
        grp_no = 1
    ENDIF

    IF (reg_no <= 0) THEN
        WRITE TPERROR (CR, 'position register must be > 0')
        ok = FALSE
    ELSE
        SET_POS_REG(reg_no, (pose_in), STATUS, grp_no)
        CHK_STAT(STATUS)
        IF (STATUS <> 0) THEN
            ok = FALSE
        ENDIF
    ENDIF
END setpr_xyz


ROUTINE setpr_joint
-- -----------
-- in: pose_in (ARRAY[9] OF REAL), reg_no, grp_no
-- out:
-- desc: set posreg 'reg_no' for group 'grp_no'
--       if no group is set, sets posreg for group 1.
--       wrapper for SET_POS_REG built-in. 
--       independant of pose class.
-- -----------
VAR
    STATUS : INTEGER
BEGIN
    ok = TRUE
    --default to 1 if group number is not set
    IF (grp_no = 0) OR UNINIT(grp_no) THEN
        grp_no = 1
    ENDIF

    IF (reg_no <= 0) THEN
        WRITE TPERROR (CR, 'position register must be > 0')
        ok = FALSE
    ELSE
        -- set jointpos to posreg
        SET_JPOS_REG(reg_no, (pose_in), STATUS, grp_no)
        CHK_STAT(STATUS)
        IF STATUS <> 0 THEN
            ok = FALSE
        ENDIF
    ENDIF
END setpr_joint

--***********
-- getters
--***********

ROUTINE getuframe
-- -----------
-- in: grp_no 
-- out:
-- desc: gets current uframe and stores it in
--       pose object.
-- -----------
VAR
    entry : INTEGER
    STATUS : INTEGER
BEGIN
    ok = TRUE
    IF (grp_no = 0) OR UNINIT(grp_no) THEN
        grp_no = 1
    ENDIF

    IF (grp_no > $SCR.$NUM_GROUP) THEN
        ok = FALSE
        WRITE TPERROR (CR, 'group number is higher than available groups')
    ENDIF 
    -- if uframe = 0, frame is zeros
    -- if uframe > 0, set $uframe to current frame
    IF $MNUFRAMENUM[grp_no] = 0 THEN 
        cur_ufnum = 0
        $UFRAME = $MOR_GRP[grp_no].$NILPOS
    ELSE
        cur_ufnum = $MNUFRAMENUM[grp_no]
        $UFRAME = $MNUFRAME[grp_no,cur_ufnum]
    ENDIF

    RETURN($UFRAME)
END getuframe


ROUTINE getutool
-- -----------
-- in: grp_no 
-- out:
-- desc: gets current utool and stores it in
--       pose object.
-- -----------
VAR
    entry : INTEGER
    STATUS : INTEGER
BEGIN
    ok = TRUE
    IF (grp_no = 0) OR UNINIT(grp_no) THEN
        grp_no = 1
    ENDIF
    -- check user input group number
    IF (grp_no > $SCR.$NUM_GROUP) THEN
        ok = FALSE
        WRITE TPERROR (CR, 'group number is higher than available groups')
    ENDIF
    -- lookup currently selected utool.
    -- if utool = 0, frame is zeros
    -- if utool > 0, $utool to current frame
    IF $MNUTOOLNUM[grp_no] = 0 THEN
        cur_utnum = 0
        $UTOOL = $MOR_GRP[grp_no].$NILPOS
    ELSE
        cur_utnum = $MNUTOOLNUM[grp_no]
        $UTOOL = $MNUTOOL[grp_no,cur_utnum]
    ENDIF

    RETURN($UTOOL)
END getutool


ROUTINE get_lpos
-- -----------
-- in: grp_no 
-- return: XYZWPR
-- desc: gets current linear position
-- -----------
VAR
    lpos : XYZWPR
BEGIN
    IF UNINIT(grp_no) THEN
        lpos = CURPOS(0, 0)
    ELSE
        lpos = CURPOS(0, 0, grp_no)
    ENDIF
    
    RETURN(lpos)
END get_lpos


ROUTINE get_jpos
-- -----------
-- in: grp_no 
-- return: JOINTPOS6
-- desc: gets current joint position
-- -----------
VAR
    jpos : JOINTPOS6
BEGIN
    IF UNINIT(grp_no) THEN
        jpos = CURJPOS(0, 0)
    ELSE
        jpos = CURJPOS(0, 0, grp_no)
    ENDIF
    
    RETURN(jpos)
END get_jpos


ROUTINE getpr
-- -----------
-- in: reg_no, grp_no
-- return: POSEDATA
-- desc: get posreg of group, grp_no, and return
-- it in a struct of POSEDATA.
-- -----------
VAR
    pos_type : INTEGER
    num_axes  : INTEGER
    pose : POSEDATA
    STATUS : INTEGER
    frame, tool : XYZWPR
BEGIN
    -- reset ok
    ok = TRUE
    -- see which representation the posreg is in
    POS_REG_TYPE(reg_no, grp_no, pos_type, num_axes, STATUS)
    
    -- abort out if something is wrong
    CHK_STAT(STATUS)
    IF (STATUS <> 0) THEN
        ok = FALSE
        RETURN(pose)
    ENDIF

    SELECT pos_type OF
        -- cartesian rep
        CASE (CC_POSITION,CC_XYZWPR,CC_EXT) :
            -- store cartesian representation
            pose.xyz = GET_POS_REG(reg_no, STATUS, grp_no)
            CHK_STAT(STATUS)
            IF STATUS <> 0 THEN
                ok = FALSE
                RETURN(pose)
            ENDIF
            -- current frame and tool must already be set
            frame = getuframe(grp_no)
            tool = getutool(grp_no)
            -- store joint represenation of pose in 'pose.joint'
            pose.joint = solveIK(pose.xyz,grp_no) -- run IK
            
            RETURN(pose)
        -- joint rep
        CASE (CC_JOINT) :
            -- get joint represenation of posreg
            pose.joint = GET_JPOS_REG(reg_no, STATUS, grp_no)
            -- abort out if something is wrong
            CHK_STAT(STATUS)
            IF STATUS <> 0 THEN
                ok = FALSE
                RETURN(pose)
            ENDIF
            -- use current uframe and utool. Convert to  
            frame = getuframe(grp_no)
            tool = getutool(grp_no)
            -- JOINT2POS((pose.jpos), $uframe, $utool, FULL_SOLN, pose.xyz, wjnt_cfg, ext_ang, STATUS)
            pose.xyz = solveK(pose.joint, grp_no)
            RETURN(pose)
    ENDSELECT
END getpr