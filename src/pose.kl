PROGRAM pose
%NOBUSYLAMP
%COMMENT = ''
%UNINITVARS
%NOLOCKGROUP
%NOPAUSE = COMMAND + TPENABLE + ERROR

%include systemvars.klt
%include pose.klt
%include errors.klt

%from errors.klh %import karelError, CHK_STAT
%from strings.klh %import s_to_joint, s_to_xyzwpr, i_to_s, s_to_vec
%include math.klh
%include matrix.klh
%include pose.klh

BEGIN
END pose

--private

--***********
-- functions
--***********

ROUTINE pose__solveIK
-- -----------
-- in: pose_in (XYZWPR), grp_no
-- return: JOINTPOS
-- desc: run IK routine on XYZWPR type to get joint angles
-- -----------
  VAR
      jpos : JOINTPOS
      jpos_ref : JOINTPOS
      wjnt_cfg : CONFIG
      ext_ax : ARRAY[*] OF REAL
      STATUS : INTEGER
      frame, tool : XYZWPR
  BEGIN
      -- update karel frames
      frame = pose__get_userframe(grp_no)
      tool = pose__get_toolframe(grp_no)
      -- get current joint rep
      jpos_ref = pose__get_jpos(grp_no) -- needed for POS2JOINT built-in
      wjnt_cfg = pose_in.config_data
      -- run IK
      POS2JOINT(jpos_ref, (pose_in), $uframe, $utool, FULL_SOLN, wjnt_cfg, ext_ax, jpos, STATUS)
      
      IF (STATUS <> 0) THEN
          ok = FALSE

          IF UNINIT(jpos) THEN
            jpos = s_to_joint('0,0,0,0,0,0', ',')
          ELSE
            CHK_STAT(STATUS)
          ENDIF
      ENDIF

      RETURN(jpos)
  END pose__solveIK

ROUTINE pose__solveK
-- -----------
-- in: jpos (JOINTPOS), grp_no
-- return: XYZWPR
-- desc: run kinematics routine on jpos
-- -----------
  VAR
      pose : POSITION
      pose2 : XYZWPR
      wjnt_cfg : CONFIG
      ext_ax : ARRAY[*] OF REAL
      STATUS : INTEGER
      frame, tool : XYZWPR
  BEGIN
      -- update karel frames
      frame = pose__get_userframe(grp_no)
      tool = pose__get_toolframe(grp_no)
      JOINT2POS((jpos), $uframe, $utool, FULL_SOLN, pose, wjnt_cfg, ext_ax, STATUS)

      IF (STATUS <> 0) THEN
          ok = FALSE

          IF UNINIT(pose) THEN
            pose2.x = 0; pose2.y = 0; pose2.z = 0; pose2.w = 0; pose2.p = 0; pose2.r =0;
          ELSE
            CHK_STAT(STATUS)
          ENDIF

          RETURN(pose2)
      ELSE
        --convert into XYZWPR
        pose2 = pose
        RETURN(pose2)
      ENDIF
  END pose__solveK

--***********
-- setters
--***********

ROUTINE pose__set_userframe
-- -----------
-- in: frm_no, grp_no
-- out:
-- desc: Set uframe to 'frm_no'. If grp_no > 0 only frame 
--       of group is changed.
-- -----------
  VAR
      entry : INTEGER
      STATUS : INTEGER
  BEGIN
      ok = TRUE
      --record previous frame number
      -- for reference
      GET_VAR(entry, '*SYSTEM*', '$MNUFRAMENUM['+i_to_s(grp_no)+']', prev_ufnum, status)
      -- if grp is not initialized default to group 1
      IF (grp_no = 0) OR (UNINIT(grp_no)) THEN
          grp_no = 1
      ENDIF

      -- store current frame number in attr
      cur_ufnum = frm_no
      $MNUFRAMENUM[grp_no] = frm_no
      -- change to frame number, frm_no
      IF frm_no = 0 THEN 
          $UFRAME = $MOR_GRP[grp_no].$NILPOS
      ELSE
          $UFRAME = $MNUFRAME[grp_no,frm_no]
      ENDIF
  END pose__set_userframe


ROUTINE pose__set_toolframe
-- -----------
-- in: frm_no, grp_no
-- out:
-- desc: Set utool to 'frm_no'. If grp_no > 0 only frame 
--       of group is changed. If grp_no is uninitialized
--       or 0, will change to 'frm_no' for all groups.
-- -----------
  VAR
      entry : INTEGER
      STATUS : INTEGER
  BEGIN
      ok = TRUE
      --record previous frame
      GET_VAR(entry, '*SYSTEM*', '$MNUTOOLNUM['+i_to_s(grp_no)+']', prev_utnum, status)
      -- if grp is not initialized default to group 1
      IF (grp_no = 0) OR (UNINIT(grp_no)) THEN
          grp_no = 1
      ENDIF

      -- store current frame number in attr
      cur_utnum = frm_no
      $MNUTOOLNUM[grp_no] = frm_no
      -- change to frame number, frm_no
      IF frm_no = 0 THEN
          $UTOOL = $MOR_GRP[grp_no].$NILPOS
      ELSE
          $UTOOL = $MNUTOOL[grp_no,frm_no]
      ENDIF
  END pose__set_toolframe

ROUTINE pose__update_uframe
  BEGIN
      ok = TRUE
      --sanity check frame number and group number
      --arguments
      IF (grp_no = 0) OR (UNINIT(grp_no)) THEN
          grp_no = 1
      ENDIF

      IF (frm_no = 0) OR (UNINIT(frm_no)) THEN
          ok = FALSE
          WRITE TPERROR (CR, 'Frame number is not set')
      ENDIF
      -- set xyzwpr to frame number
      $MNUFRAME[grp_no,frm_no] = frame
      -- make this frame the current frame
      pose__set_userframe(frm_no, grp_no)
  END pose__update_uframe

ROUTINE pose__update_utool
  BEGIN
      ok = TRUE
      --sanity check frame number and group number
      --arguments
      IF (grp_no = 0) OR (UNINIT(grp_no)) THEN
          grp_no = 1
      ENDIF

      IF (frm_no = 0) OR (UNINIT(frm_no)) THEN
          ok = FALSE
          WRITE TPERROR (CR, 'Tool number is not set')
      ENDIF
      -- set xyzwpr to frame number
      $MNUTOOL[grp_no,frm_no] = frame
      -- make this frame the current frame
      pose__set_toolframe(frm_no, grp_no)
  END pose__update_utool


ROUTINE pose__set_config
  VAR
    cnfg : CONFIG
    STATUS : INTEGER
  BEGIN
    CNV_STR_CONF(conf_str, cnfg, STATUS)
    CHK_STAT(STATUS)
    IF (STATUS <> 0) THEN
        ok = FALSE
    ENDIF

    RETURN(cnfg)
  END pose__set_config


ROUTINE pose__set_jointpos
  VAR
      joint_pose : JOINTPOS9
      STATUS : INTEGER
      i : INTEGER
      r_joints : ARRAY[9] OF REAL
  BEGIN
      ok = TRUE

      FOR i=1 TO ARRAY_LEN(r_joints) DO
          IF i > ARRAY_LEN(arr) THEN
            r_joints[i] = 0
          ELSE IF UNINIT(arr[i]) THEN
            r_joints[i] = 0
          ELSE
            r_joints[i] = arr[i]
          ENDIF
          ENDIF
      ENDFOR

      CNV_REL_JPOS(r_joints, joint_pose, STATUS)
      CHK_STAT(STATUS)
      IF STATUS <> 0 THEN
          ok = FALSE
      ENDIF

      RETURN(joint_pose)
  END pose__set_jointpos


ROUTINE pose__set_jointpos_str
  BEGIN
    RETURN(s_to_joint(pose_in, ','))
  END pose__set_jointpos_str


ROUTINE pose__set_xyzwpr
-- -----------
-- in: pose_in (ARRAY[6] OF REAL), conf_str (STRING[25])
-- desc: convert into XYZWPR type
-- -----------
  VAR
      pose : XYZWPR
  BEGIN
      ok = TRUE
      --store array into xyzwpr data type
      pose.x = arr[1]
      pose.y = arr[2]
      pose.z = arr[3]
      pose.w = arr[4]
      pose.p = arr[5]
      pose.r = arr[6]
      -- convert config string into config type
      pose.config_data = pose__set_config(conf_str)

      RETURN(pose)
      
  END pose__set_xyzwpr

ROUTINE pose__set_xyzwpr_str
  VAR
    pose : XYZWPR
    status : INTEGER
  BEGIN
    pose = s_to_xyzwpr(pose_in, ',')
    pose.config_data = pose__set_config(conf_str)

    RETURN(pose)

  END pose__set_xyzwpr_str


ROUTINE pose__set_posreg_xyz
-- -----------
-- in: pose_in (XYZWPREXT), reg_no, grp_no
-- out:
-- desc: set posreg 'reg_no' for group 'grp_no'
--       if no group is set, sets posreg for group 1.
--       wrapper for SET_POS_REG built-in. 
--       independant of pose class.
-- -----------
  VAR
      STATUS : INTEGER
  BEGIN
      ok = TRUE
      --default to 1 if group number is not set
      IF (grp_no = 0) OR UNINIT(grp_no) THEN
          grp_no = 1
      ENDIF

      IF (reg_no <= 0) THEN
          WRITE TPERROR (CR, 'position register must be > 0')
          ok = FALSE
      ELSE
          SET_POS_REG(reg_no, (pose_in), STATUS, grp_no)
          CHK_STAT(STATUS)
          IF (STATUS <> 0) THEN
              ok = FALSE
          ENDIF
      ENDIF
  END pose__set_posreg_xyz


ROUTINE pose__set_posreg_joint
-- -----------
-- in: pose_in (ARRAY[9] OF REAL), reg_no, grp_no
-- out:
-- desc: set posreg 'reg_no' for group 'grp_no'
--       if no group is set, sets posreg for group 1.
--       wrapper for SET_POS_REG built-in. 
--       independant of pose class.
-- -----------
  VAR
      STATUS : INTEGER
  BEGIN
      ok = TRUE
      --default to 1 if group number is not set
      IF (grp_no = 0) OR UNINIT(grp_no) THEN
          grp_no = 1
      ENDIF

      IF (reg_no <= 0) THEN
          WRITE TPERROR (CR, 'position register must be > 0')
          ok = FALSE
      ELSE
          -- set jointpos to posreg
          SET_JPOS_REG(reg_no, (pose_in), STATUS, grp_no)
          CHK_STAT(STATUS)
          IF STATUS <> 0 THEN
              ok = FALSE
          ENDIF
      ENDIF
  END pose__set_posreg_joint

--***********
-- getters
--***********

ROUTINE pose__get_userframe
-- -----------
-- in: grp_no 
-- out:
-- desc: gets current uframe and stores it in
--       pose object.
-- -----------
  VAR
      entry : INTEGER
      STATUS : INTEGER
  BEGIN
      ok = TRUE
      IF (grp_no = 0) OR UNINIT(grp_no) THEN
          grp_no = 1
      ENDIF

      IF (grp_no > $SCR.$NUM_GROUP) THEN
          ok = FALSE
          WRITE TPERROR (CR, 'group number is higher than available groups')
      ENDIF 
      -- if uframe = 0, frame is zeros
      -- if uframe > 0, set $uframe to current frame
      IF $MNUFRAMENUM[grp_no] = 0 THEN 
          cur_ufnum = 0
          $UFRAME = $MOR_GRP[grp_no].$NILPOS
      ELSE
          cur_ufnum = $MNUFRAMENUM[grp_no]
          $UFRAME = $MNUFRAME[grp_no,cur_ufnum]
      ENDIF

      RETURN($UFRAME)
  END pose__get_userframe


ROUTINE pose__get_toolframe
-- -----------
-- in: grp_no 
-- out:
-- desc: gets current utool and stores it in
--       pose object.
-- -----------
  VAR
      entry : INTEGER
      STATUS : INTEGER
  BEGIN
      ok = TRUE
      IF (grp_no = 0) OR UNINIT(grp_no) THEN
          grp_no = 1
      ENDIF
      -- check user input group number
      IF (grp_no > $SCR.$NUM_GROUP) THEN
          ok = FALSE
          WRITE TPERROR (CR, 'group number is higher than available groups')
      ENDIF
      -- lookup currently selected utool.
      -- if utool = 0, frame is zeros
      -- if utool > 0, $utool to current frame
      IF $MNUTOOLNUM[grp_no] = 0 THEN
          cur_utnum = 0
          $UTOOL = $MOR_GRP[grp_no].$NILPOS
      ELSE
          cur_utnum = $MNUTOOLNUM[grp_no]
          $UTOOL = $MNUTOOL[grp_no,cur_utnum]
      ENDIF

      RETURN($UTOOL)
  END pose__get_toolframe


ROUTINE pose__get_lpos
-- -----------
-- in: grp_no 
-- return: XYZWPR
-- desc: gets current linear position
-- -----------
  VAR
      lpos : XYZWPR
  BEGIN
      IF UNINIT(grp_no) THEN
          lpos = CURPOS(0, 0)
      ELSE
          lpos = CURPOS(0, 0, grp_no)
      ENDIF
      
      RETURN(lpos)
  END pose__get_lpos


ROUTINE pose__get_jpos
-- -----------
-- in: grp_no 
-- return: JOINTPOS6
-- desc: gets current joint position
-- -----------
  VAR
      jpos : JOINTPOS6
  BEGIN
      IF UNINIT(grp_no) THEN
          jpos = CURJPOS(0, 0)
      ELSE
          jpos = CURJPOS(0, 0, grp_no)
      ENDIF
      
      RETURN(jpos)
  END pose__get_jpos


ROUTINE pose__get_posreg_xyz
-- -----------
-- in: reg_no, grp_no
-- return: XYZWPR
-- desc: get posreg of group, grp_no, and return
-- it in a struct of POSEDATA.
-- -----------
  VAR
      pos_type : INTEGER
      num_axes  : INTEGER
      pose : XYZWPR
      STATUS : INTEGER
  BEGIN
      -- reset ok
      ok = TRUE
      -- see which representation the posreg is in
      POS_REG_TYPE(reg_no, grp_no, pos_type, num_axes, STATUS)
      
      -- abort out if something is wrong
      CHK_STAT(STATUS)
      IF (STATUS <> 0) THEN
          ok = FALSE
          karelError(POS_TYPE_MISMATCH,'pose type not set', ER_ABORT)
      ENDIF

      SELECT pos_type OF
          -- cartesian rep
          CASE (CC_POSITION,CC_XYZWPR,CC_EXT) :
              -- store cartesian representation
              pose = GET_POS_REG(reg_no, STATUS, grp_no)
              CHK_STAT(STATUS)
              IF STATUS <> 0 THEN
                  ok = FALSE
                  karelError(POS_REG_NOT_SET,'PR' + i_to_s(reg_no) + ' not set', ER_ABORT)
              ENDIF
              
              RETURN(pose)
          -- joint rep
          CASE (CC_JOINT) :
              ok = FALSE
              karelError(POS_TYPE_MISMATCH,'PR' + i_to_s(reg_no) + 'is joint type. Use joint routine variant.', ER_ABORT)
      ENDSELECT
  END pose__get_posreg_xyz

ROUTINE pose__get_posreg_joint
-- -----------
-- in: reg_no, grp_no
-- return: JOINTPOS
-- desc: get posreg of group, grp_no, and return
-- it in a struct of POSEDATA.
-- -----------
  VAR
      pos_type : INTEGER
      num_axes  : INTEGER
      pose : JOINTPOS
      STATUS : INTEGER
  BEGIN
      -- reset ok
      ok = TRUE
      -- see which representation the posreg is in
      POS_REG_TYPE(reg_no, grp_no, pos_type, num_axes, STATUS)
      
      -- abort out if something is wrong
      CHK_STAT(STATUS)
      IF (STATUS <> 0) THEN
          ok = FALSE
          karelError(POS_TYPE_MISMATCH,'pose type not set', ER_ABORT)
      ENDIF

      SELECT pos_type OF
          -- cartesian rep
          CASE (CC_POSITION,CC_XYZWPR,CC_EXT) :
              ok = FALSE
              karelError(POS_TYPE_MISMATCH,'PR' + i_to_s(reg_no) + 'is cartesian type. Use XYZ routine variant.', ER_ABORT)
          -- joint rep
          CASE (CC_JOINT) :
              -- get joint represenation of posreg
              pose = GET_JPOS_REG(reg_no, STATUS, grp_no)
              -- abort out if something is wrong
              CHK_STAT(STATUS)
              IF STATUS <> 0 THEN
                  ok = FALSE
                  RETURN(pose)
              ENDIF
              RETURN(pose)
      ENDSELECT
  END pose__get_posreg_joint

ROUTINE pose__get_ok
  BEGIN
    RETURN(ok)
  END pose__get_ok

ROUTINE pose__get_orientation
  VAR
    v : VECTOR
  BEGIN
    v.x = pose.w; v.y = pose.p; v.z = pose.r
    RETURN(v)
  END pose__get_orientation


ROUTINE pose__jpos_to_jpos2
  VAR
    arr : ARRAY[2] OF REAL
    status : INTEGER
    out_arr : JOINTPOS2
  BEGIN
    --extract into real array
    CNV_JPOS_REL(pose, arr, status)
    CHK_STAT(status)
    --store in different joint pose type
    CNV_REL_JPOS(arr, out_arr, status)
    CHK_STAT(status)

    RETURN(out_arr)
  END pose__jpos_to_jpos2


  ROUTINE pose__jpos_to_jpos3
    VAR
      arr : ARRAY[3] OF REAL
      status : INTEGER
      out_arr : JOINTPOS3
    BEGIN
      --extract into real array
      CNV_JPOS_REL(pose, arr, status)
      CHK_STAT(status)
      --store in different joint pose type
      CNV_REL_JPOS(arr, out_arr, status)
      CHK_STAT(status)

      RETURN(out_arr)
    END pose__jpos_to_jpos3

  ROUTINE pose__jpos_to_jpos6
    VAR
      arr : ARRAY[6] OF REAL
      status : INTEGER
      out_arr : JOINTPOS6
    BEGIN
      --extract into real array
      CNV_JPOS_REL(pose, arr, status)
      CHK_STAT(status)
      --store in different joint pose type
      CNV_REL_JPOS(arr, out_arr, status)
      CHK_STAT(status)

      RETURN(out_arr)
    END pose__jpos_to_jpos6

  ROUTINE pose__matrix_to_cart
    VAR
      STATUS : INTEGER
      pose_in : XYZWPR
      pos_type, num_axes  : INTEGER
    BEGIN
      ok = TRUE
      --default to 1 if group number is not set
      IF (grp_no = 0) OR UNINIT(grp_no) THEN
          grp_no = 1
      ENDIF

      IF (reg_no <= 0) THEN
          WRITE TPERROR (CR, 'position register must be > 0')
          ok = FALSE
      ELSE
          --get matrix pos reg
          pose_in = pose__get_posreg_xyz(reg_no, grp_no)
          --convert to XYZWPR representation
          SET_POS_REG(reg_no, (pose_in), STATUS, grp_no)
          CHK_STAT(STATUS)
          IF (STATUS <> 0) THEN
              ok = FALSE
          ENDIF
      ENDIF
    END pose__matrix_to_cart


ROUTINE pose__pose_to_vector
  VAR
    v : VECTOR
  BEGIN
    v.x = pose.x ; v.y = pose.y ; v.z = pose.z
    RETURN(v)
  END pose__pose_to_vector

ROUTINE pose__vector_to_pose
  VAR
    p : XYZWPR
  BEGIN
    p.x = v.x ; p.y = v.y; p.z = v.z;
    p.w = orient.x ; p.p = orient.y ; p.r = orient.z;
    p.config_data = cnf

    RETURN(p)
  END  pose__vector_to_pose


ROUTINE pose__cylindrical_to_cartesian
  VAR
    v : VECTOR
  BEGIN
    v.x = 0 ; v.y=radius ; v.z=height ;
    RETURN(math__translate(math__rotz((origin), angle), v ))
  END pose__cylindrical_to_cartesian


--math operations
ROUTINE pose__add_jpos
  VAR
    arr1 : ARRAY[9] OF REAL
    arr2 : ARRAY[9] OF REAL
    out_arr : ARRAY[9] OF REAL
    status : INTEGER
  BEGIN
    CNV_JPOS_REL(pose1, arr1, status)
    CNV_JPOS_REL(pose2, arr2, status)
    matrix__add_1D(arr1, arr2, out_arr)

    CNV_REL_JPOS(out_arr, out_jpos, status)
    CHK_STAT(status)

  END pose__add_jpos

ROUTINE pose__find_circle_center
  VAR
    circ : T_CIRCLE
  BEGIN
    IF ARRAY_LEN(points) = 3 THEN
      circ = pose__find_circumcenter(points[1], points[2], points[3])
      RETURN(circ.center)
    ELSE
      karelError(INVALID_TYPE_CODE, 'Solving circle center is not yet implemented for ' + i_to_s(ARRAY_LEN(points)) + ' points.', ER_ABORT)
    ENDIF
  END pose__find_circle_center

ROUTINE pose__find_circumcenter
  VAR
    c : T_CIRCLE
    alpha, beta, gamma : REAL
  BEGIN
    -- (ref: https://en.wikipedia.org/wiki/Circumscribed_circle#Circumcenter_coordinates) 
    -- calculate radius
    c.radius = (math__norm(p1-p2)*math__norm(p2-p3)*math__norm(p3-p1))/(2*math__norm((p1-p2)#(p2-p3)))
    -- calculate center
    alpha = (math__pow(math_norm(p2-p3), 2)*((p1-p2)@(p1-p3)))/(2*math_pow(math_norm((p1-p2)#(p2-p3)), 2))
    beta = (math__pow(math_norm(p1-p3), 2)*((p2-p1)@(p2-p3)))/(2*math_pow(math_norm((p1-p2)#(p2-p3)), 2))
    gamma = (math__pow(math_norm(p1-p2), 2)*((p3-p1)@(p3-p2)))/(2*math_pow(math_norm((p1-p2)#(p2-p3)), 2))

    c.center = alpha*p1 + beta*p2 + gamma*p3

    RETURN(c)
  END pose__find_circumcenter

