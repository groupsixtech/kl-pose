PROGRAM test_pose
%NOBUSYLAMP
%COMMENT = ''
%NOLOCKGROUP

--use to test kinematic function
--must verify robot utool number
--as well as confirm assertions in 
-- t_Kinematics & t_IK
%define TEST_ROBOT_KINEMATICS FALSE


%ifeq TEST_ROBOT_KINEMATICS TRUE
--change to zero tool frame
--will change from system to system
%define EOAT_FRAME_NO 6
%endif

%define LOG_NAME 'RD:tpose_debug.DT'

VAR
  entry : INTEGER
  status : INTEGER

%include pose.klt
%include pose_type.klt
--cell position type
path_type_define(t_node,kinpos)
%undef path_type_define

%ifdef DEBUG_BUILD
%include display.c.klt
%endif

%include pose_structs.klt
%include common_poses.klt

%include pose.klh
%include math.klh
%include strings.klh
%from systemlib.klh %import VEC
%include kunit.klh

%ifdef DEBUG_BUILD
%from display.klh %import clear, show

-- user display log
%class usrdis('dispclass.klc','dispclass.klh')

%endif

--template for full kinematic model poses 
%class kinpos('pose.klc','pose_class.klh','pose_type.klt')
-- ** Need to add test for this class **

-- set frames
ROUTINE t_set_uf : BOOLEAN
  VAR
    b : BOOLEAN
    frame_no : INTEGER
    group_no : INTEGER
    expect : INTEGER
  BEGIN
    -- set uframe
    frame_no = 3

    -- test without group
    pose__set_userframe(frame_no, 0)
    b = pose__get_ok

    --get current frame number
    GET_VAR(entry, '*SYSTEM*', '$MNUFRAMENUM[1]', expect, status)

    RETURN(kunit_assert(b) AND kunit_eq_int(expect, frame_no))
  END t_set_uf

ROUTINE t_set_uf_grp : BOOLEAN
  VAR
    b : BOOLEAN
    frame_no : INTEGER
    group_no : INTEGER
    expect : INTEGER
  BEGIN
    -- set uframe
    frame_no = 2
    group_no = 1

    pose__set_userframe(frame_no, group_no)
    b = pose__get_ok

    --get current frame number
    GET_VAR(entry, '*SYSTEM*', '$MNUFRAMENUM['+i_to_s(group_no)+']', expect, status)

    RETURN(kunit_assert(b) AND kunit_eq_int(expect, frame_no))
  END t_set_uf_grp

ROUTINE t_set_ut : BOOLEAN
  VAR
    b : BOOLEAN
    frame_no : INTEGER
    group_no : INTEGER
    expect : INTEGER
  BEGIN
    -- set uframe
    frame_no = 1

    -- test without group
    pose__set_toolframe(frame_no, 0)
    b = pose__get_ok

    --get current frame number
    GET_VAR(entry, '*SYSTEM*', '$MNUTOOLNUM[1]', expect, status)

    RETURN(kunit_assert(b) AND kunit_eq_int(expect, frame_no))
  END t_set_ut

ROUTINE t_set_ut_grp : BOOLEAN
  VAR
    b : BOOLEAN
    frame_no : INTEGER
    group_no : INTEGER
    expect : INTEGER
  BEGIN
    -- set uframe
    frame_no = 1
    group_no = 1

    pose__set_toolframe(frame_no, group_no)
    b = pose__get_ok

    --get current frame number
    GET_VAR(entry, '*SYSTEM*', '$MNUTOOLNUM['+i_to_s(group_no)+']', expect, status)

    RETURN(kunit_assert(b) AND kunit_eq_int(frame_no, expect))
  END t_set_ut_grp

%ifeq TEST_ROBOT_KINEMATICS TRUE
ROUTINE t_IK : BOOLEAN
  VAR
    pos1, pos2 : XYZWPR
    actual1, actual2 : JOINTPOS6
    expected1, expected2 : JOINTPOS6
  BEGIN
    pose__set_userframe(1, 0)
    pose__set_toolframe(EOAT_FRAME_NO, 0)

    pos1 = pose__set_xyzwpr_str('-214.806,1335.678,330.26,115.919,-89.833,65.080','F U T, 0, 0, 0')
    actual1 = pose__solveIK(pos1, 1)
    expected1 = pose__set_jointpos_str('106.304,11.256,-42.688,-100.565,101.138,46.420')

    pos2 = pose__set_xyzwpr_str('998.627,0,928.845,180,-90,0','N U T, 0, 0, 0')
    actual2 = pose__solveIK(pos2, 1)
    expected2 = pose__set_jointpos_str('0,0,0,0,0,0')

    RETURN(kunit_eq_jnt((expected1), (actual1)) AND kunit_eq_jnt((expected2), (actual2)) )

  END t_IK
%endif

%ifeq TEST_ROBOT_KINEMATICS TRUE
ROUTINE t_Kinematics : BOOLEAN
  VAR
    pos1, pos2 : JOINTPOS
    actual1, actual2 : XYZWPR
    expected1, expected2 : XYZWPR
  BEGIN
    pose__set_userframe(1, 0)
    pose__set_toolframe(EOAT_FRAME_NO, 0)

    pos1 = pose__set_jointpos_str('106.304,11.256,-42.688,-100.565,101.138,46.420')
    actual1 = pose__solveK(pos1, 1)
    expected1 = pose__set_xyzwpr_str('-214.806,1335.678,330.26,115.919,-89.833,65.080','F U T, 0, 0, 0')

    pos2 = pose__set_jointpos_str('0,-36,0,0,0,0')
    actual2 = pose__solveK(pos2, 1)
    expected2 = pose__set_xyzwpr_str('998.627,0,928.845,180,-90,0','N U T, 0, 0, 0')

    RETURN( kunit_eq_pos(expected2, actual2) AND kunit_eq_pos(expected1, actual1))

  END t_Kinematics
%endif

-- get uframe
ROUTINE t_get_uf : BOOLEAN
  VAR
    b : ARRAY[2] OF BOOLEAN
    frame : XYZWPR
    frame_no : INTEGER
    group_no : INTEGER
    actual : XYZWPR
  BEGIN
    -- set frame
    frame_no = 3
    group_no = 1
    pose__set_userframe(frame_no, group_no)
    b[1] = pose__get_ok

    IF NOT b[1] THEN
      RETURN(b[1])
    ENDIF

    -- get frame
    frame = pose__get_userframe(group_no)
    b[2] = pose__get_ok
    actual = $MNUFRAME[group_no, frame_no]

    RETURN(kunit_assert(b[1]) AND kunit_assert(b[2]) AND kunit_eq_pos(actual, frame))
  END t_get_uf

-- get utool
ROUTINE t_get_ut : BOOLEAN
  VAR
    b : ARRAY[2] OF BOOLEAN
    tool : XYZWPR
    tool_no : INTEGER
    group_no : INTEGER
    actual : XYZWPR
  BEGIN

    -- set frame
    tool_no = 1
    group_no = 1
    pose__set_toolframe(tool_no, group_no)

    b[1] = pose__get_ok
    IF NOT b[1] THEN
      RETURN(b[1])
    ENDIF

    tool = pose__get_toolframe(group_no)

    b[2] = pose__get_ok
    IF NOT b[2] THEN
      RETURN(b[2])
    ENDIF
    actual = $MNUTOOL[group_no, tool_no]

    RETURN(kunit_assert(b[1]) AND kunit_assert(b[2]) AND kunit_eq_pos(actual, tool))
  END t_get_ut

ROUTINE t_set_joint : BOOLEAN
  VAR
    pose : JOINTPOS6
    b  : BOOLEAN
    actual : ARRAY[6] OF REAL
    expected : ARRAY[6] OF REAL
  BEGIN
    -- set proper frame
    pose__set_toolframe(1, 1)
    pose__set_userframe(4, 1)
    -- set jointpos type
    expected[1] = 10.0
    expected[2] = 30.0
    expected[3] = 190.0
    expected[4] = -90.0
    expected[5] = 0.0
    expected[6] = 180.0
    
    pose = pose__set_jointpos(expected)

    b = pose__get_ok
    IF NOT b THEN
      RETURN(b)
    ENDIF

    -- check positions
    CNV_JPOS_REL(pose, actual, status)

    RETURN(kunit_assert(b) AND kunit_eq_arr(expected, actual))
  END t_set_joint

ROUTINE t_set_joint2 : BOOLEAN
  VAR
    origin : ARRAY[6] OF REAL
    origin_jnt : JOINTPOS
    angle : REAL
    actual : JOINTPOS
    expected_arr : ARRAY[6] OF REAL
    expected : JOINTPOS
  BEGIN
    -- set jointpos type
    origin[1] = 90.0
    origin[2] = 0.0
    origin[3] = 0.0
    origin[4] = 0.0
    origin[5] = 0.0
    origin[6] = 0.0
    origin_jnt = pose__set_jointpos(origin)

    --add -15 deg to J2
    angle = -15
    actual = pose__set_jointpos_axis(actual,2,angle)
    actual = pose__jpos_add(origin_jnt, actual)

    --expected
    expected_arr[1] = 90
    expected_arr[2] = -15
    expected_arr[3] = 0
    expected_arr[4] = 0
    expected_arr[5] = 0
    expected_arr[6] = 0
    expected = pose__set_jointpos(expected_arr)

    RETURN(kunit_eq_jnt((expected), (actual) ) )
  END t_set_joint2


ROUTINE t_set_xyz : BOOLEAN
  VAR
    expected : XYZWPR
    actual : XYZWPR
    conf_str : STRING[25]
    arr : ARRAY[6] OF REAL
    b : BOOLEAN
  BEGIN
    -- set proper frame
    pose__set_toolframe(1, 1)
    pose__set_userframe(4, 1)

    --set position
    expected.x = 10.0
    expected.y = 30.0
    expected.z = 190.0
    expected.w = -90.0
    expected.p = 0.0
    expected.r = 180.0
    conf_str = 'F U T, 0, 0, 0'
    --convert to config type
    CNV_STR_CONF(conf_str, expected.config_data, STATUS)
    IF STATUS <> 0 THEN
      b = FALSE
      RETURN(FALSE)
    ENDIF

    -- set array
    arr[1] = 10.0
    arr[2] = 30.0
    arr[3] = 190.0
    arr[4] = -90.0
    arr[5] = 0.0
    arr[6] = 180.0

    actual = pose__set_xyzwpr(arr, conf_str)
    b = pose__get_ok

    RETURN(kunit_assert(b) AND kunit_eq_pos(expected, actual))
  END t_set_xyz

ROUTINE t_set_prc : BOOLEAN
  VAR
    expected : XYZWPR
    pr_num : INTEGER
    conf_str : STRING[25]
    grp_num : INTEGER
    STATUS : INTEGER
    b : BOOLEAN
    actual : XYZWPR
  BEGIN
    b = TRUE
    --set posreg number
    pr_num = 80
    grp_num = 1
    --set position
    expected.x = 10.0
    expected.y = 30.0
    expected.z = 190.0
    expected.w = -90.0
    expected.p = 0.0
    expected.r = 180.0
    conf_str = 'F U T, 0, 0, 0'
    --convert to config type
    CNV_STR_CONF(conf_str, expected.config_data, STATUS)
    IF STATUS <> 0 THEN
      WRITE TPDISPLAY('config conversion failure')
      b = FALSE
      RETURN(FALSE)
    ENDIF
    -- set pr
    pose__set_posreg_xyz(expected, pr_num, grp_num)
    b = pose__get_ok
    -- get pr for comparision
    actual = GET_POS_REG(pr_num, status, grp_num)
    IF STATUS <> 0 THEN
      WRITE TPDISPLAY('get PR failure')
      b = FALSE
      RETURN(FALSE)
    ENDIF

    RETURN(kunit_assert(b) AND kunit_eq_pos(expected, actual))

  END t_set_prc

ROUTINE t_set_prj : BOOLEAN
  VAR
    pr_num : INTEGER
    expected : ARRAY[6] OF REAL
    jpos_exp : JOINTPOS6
    jpos_act : JOINTPOS6
    b : BOOLEAN
  BEGIN
    pr_num = 49
    -- set jointpos type
    expected[1] = 10.0
    expected[2] = 30.0
    expected[3] = 190.0
    expected[4] = -90.0
    expected[5] = 0.0
    expected[6] = 180.0
    -- convert into jointpos form
    jpos_exp = pose__set_jointpos(expected)
    -- push jointpos to pr
    pose__set_posreg_joint((jpos_exp), pr_num, 0)
    -- check that functions completed
    b = pose__get_ok
    IF NOT b THEN
      RETURN(FALSE)
    ENDIF

    -- get pr for comparision
    jpos_act = GET_JPOS_REG(pr_num, status)
    IF STATUS <> 0 THEN
      RETURN(FALSE)
    ENDIF

    RETURN(kunit_assert(b) AND kunit_eq_jnt((jpos_exp), (jpos_act)))

  END t_set_prj

ROUTINE t_circum : BOOLEAN
  VAR
    circ, circ2 : T_CIRCLE
    expected, expected2 : T_CIRCLE
    p1,p2,p3 : VECTOR
    pose : XYZWPR
  BEGIN
    --simple case

    expected.radius = 300
    expected.center = VEC(300,0,0)
    -- points at 0deg 135deg and 225deg
    p1 = VEC(300,0,300)
    p2 = VEC(300,212.130,-212.130)
    p3 = VEC(300,-212.130,-212.130)

    circ = pose__find_circumcenter(p1, p2, p3)
    circ.radius = math__round(circ.radius)

    --complex case

    expected2.radius = 300
    -- center is pos(600,0,0,0,-45,0)
    -- world vec(424.264,0,424.264)
    pose = ZEROPOS(1)
    pose = math__translate(math__roty((pose),-45), VEC(600,0,0))
    expected2.center = pose__pose_to_vector(pose)
    
    -- points at 0deg 90deg and -90deg
    p1 = VEC(212.132,0,636.396)
    p2 = VEC(424.264,300.000,424.264)
    p3 = VEC(424.264,-300.000,424.264)

    circ2 = pose__find_circumcenter(p1, p2, p3)
    circ2.radius = math__round(circ2.radius)

    RETURN(kunit_eq_r(expected.radius, circ.radius) AND kunit_eq_vrl(expected.center, circ.center, 0.2) AND &
           kunit_eq_r(expected2.radius, circ2.radius) AND kunit_eq_vrl(expected2.center, circ2.center, 0.2))

  END t_circum


ROUTINE t_dist : BOOLEAN
  VAR
    pose: XYZWPR
    frm1, frm2: XYZWPR
  BEGIN
    --set up test pose
    pose = pose__set_xyzwpr_str('0,0,300,0,0,0', 'N D B, 0, 0, 0')
    -- frame 1
    frm1 = pose__set_xyzwpr_str('150,90,300,-25,15,0', 'N D B, 0, 0, 0')
    -- frame 2
    frm2 = pose__set_xyzwpr_str('150,90,300,0,0,0', 'N D B, 0, 0, 0')

    RETURN( kunit_eq_r(149.7437, pose__distance(frm1:pose, frm2:pose)) )

  END t_dist

ROUTINE t_frm_nrml : BOOLEAN
  VAR
    origin_frame : XYZWPR
    p1, p2: VECTOR
    actual, expected : XYZWPR
    actual2, expected2 : XYZWPR
    actual3, expected3 : XYZWPR
    actual4, expected4 : XYZWPR
    actual5, expected5 : XYZWPR
  BEGIN

    origin_frame = ZEROPOS(1)

    p1 = VEC(0,0,0)
%ifdef DEBUG_BUILD
    usrdis__print(INFO,'test normal frame 1')
%endif
    p2 = VEC(334,-300,398.048)
    actual = pose__create_frame_from_normal(p1, p2, origin_frame)
    expected = pose__set_xyzwpr_str('0.0,0.0,0.0,42.2,26.4,22.0','N B D, 0, 0, 0')

%ifdef DEBUG_BUILD
    usrdis__print(DEBUG,'frame1:' + pose_to_s(actual, ',') )
    usrdis__print(INFO,'test normal frame 2')
%endif
    p2 = VEC(696.364,707.107,122.788)
    actual2 = pose__create_frame_from_normal(p1, p2, origin_frame)
    expected2 = pose__set_xyzwpr_str('0.0,0.0,0.0,-82.9,6.8,-43.7','N B D, 0, 0, 0')

%ifdef DEBUG_BUILD
    usrdis__print(DEBUG,'frame2:' + pose_to_s(actual2, ',') )
    usrdis__print(INFO,'test normal frame 3')
%endif
    p1 = VEC(150,90,300)
    p2 = VEC(337.656,428.095,1000.341)
    actual3 = pose__create_frame_from_normal(p1, p2, origin_frame)
    expected3 = pose__set_xyzwpr_str('150.0,90.0,300.0,28.4,5.7,140.5','N B D, 0, 0, 0')

%ifdef DEBUG_BUILD
    usrdis__print(DEBUG,'frame3:' + pose_to_s(actual3, ',') )
    usrdis__print(INFO,'test normal frame 4')
%endif
    p1 = VEC(337.656,428.095,1000.341)
    p2 = VEC(150,90,300)
    actual4 = pose__create_frame_from_normal(p1, p2, origin_frame)
    expected4 = pose__set_xyzwpr_str('337.7,428.1,1000.3,-151.6,5.7,140.5','N B D, 0, 0, 0')

%ifdef DEBUG_BUILD
    usrdis__print(DEBUG,'frame4:' + pose_to_s(actual4, ',') )
    usrdis__print(INFO,'test normal frame 5')
%endif
    p1 = VEC(0.0,0.0,477.005)
    p2 = VEC(0.351,-0.779,-555.0)
    actual5 = pose__create_frame_from_normal(p1, p2, origin_frame)
    expected5 = pose__set_xyzwpr_str('0.0,0.0,477.0,180.0,-0.0,2.1','N B D, 0, 0, 0')

%ifdef DEBUG_BUILD
    usrdis__print(DEBUG,'frame5:' + pose_to_s(actual5, ',') )
%endif

    RETURN( kunit_eq_pos(expected, actual) AND kunit_eq_pos(expected2, actual2) AND &
            kunit_eq_pos(expected3, actual3) AND kunit_eq_pos(expected4, actual4) AND & 
            kunit_eq_pos(expected5, actual5))
  END t_frm_nrml

ROUTINE t_frm_nrml2 : BOOLEAN
  VAR
    origin_frame : XYZWPR
    p1, p2: VECTOR
    actual, expected : XYZWPR
  BEGIN

    origin_frame = POS(230.5, -268.4, 259.1, -37.34, 33.83, -23.01, (ZEROPOS(1).config_data))

    p1 = VEC(49.678, 82.492, 257.812)
%ifdef DEBUG_BUILD
    usrdis__print(INFO,'test normal frame 1 relative to')
    usrdis__print(DEBUG,'parent:' + pose_to_s(origin_frame, ',') )
%endif
    p2 = VEC(-101.875, -126.890, 890.539)
    actual = pose__create_frame_from_normal(p1, p2, origin_frame)
    expected = pose__set_xyzwpr_str('434.6,-113.9,360.1,-12.3,-24.5,-131.3','N B D, 0, 0, 0')

%ifdef DEBUG_BUILD
    usrdis__print(DEBUG,'frame1:' + pose_to_s(actual, ',') )
%endif

    RETURN( kunit_eq_pos(expected, actual))
  END t_frm_nrml2

ROUTINE t_cylind : BOOLEAN
  VAR
    origin : XYZWPR
    actual1, actual2 : XYZWPR
    expected1 : XYZWPR
    v : VECTOR
  BEGIN
    origin = $MOR_GRP[1].$NILPOS
    expected1 = pose__set_xyzwpr_str('34.202,-93.969,210,0,0,-160', 'N D B, 0, 0, 0')
    --order : Theta, r, z
    v = VEC(200,100,210)
    actual1 = pose__cylindrical_to_cartesian(origin, pose__vector_to_pose(v, VEC(0,0,0), origin.config_data), Z_AXES)

    actual2 = pose__cylinder_surf_to_origin(expected1, v)

    RETURN( kunit_eq_pos(expected1, actual1) AND kunit_eq_pos(origin, actual2) )

  END t_cylind

ROUTINE t_veceul : BOOLEAN
  VAR
    act_ang : ARRAY[8] OF VECTOR
    exp_ang : ARRAY[8] OF VECTOR
  BEGIN
    act_ang[1] = pose__vector_to_euler(1,0,0,X_AXES)
    act_ang[2] = pose__vector_to_euler(0,0,1,X_AXES)
    act_ang[3] = pose__vector_to_euler(1,1,0,X_AXES)
    act_ang[4] = pose__vector_to_euler(-0.75,0.38,-0.55,X_AXES)
    act_ang[5] = pose__vector_to_euler(-0.16,0.41,0.9,X_AXES)

    act_ang[6] = pose__vector_to_euler(0,-1,1,Z_AXES)
    act_ang[7] = pose__vector_to_euler(0.707,0.707,1,Z_AXES)
    act_ang[8] = pose__vector_to_euler(0.7,0,-0.71,Z_AXES)

    exp_ang[1] = VEC(0,0,0)
    exp_ang[2] = VEC(0,-90,0)
    exp_ang[3] = VEC(0,0,45)
    exp_ang[4] = VEC(0,33.09,153.13)
    exp_ang[5] = VEC(0,-63.94,111.32)

    exp_ang[6] = VEC(0,45,-90)
    exp_ang[7] = VEC(0,45,45)
    exp_ang[8] = VEC(180,44.51,-180)

    RETURN( kunit_eq_arv(exp_ang, act_ang, 0.2) )

  END t_veceul

ROUTINE t_cylvec : BOOLEAN
  VAR
    theta : REAL
    tangent : VECTOR
    normal : VECTOR
    act_orient : ARRAY[9] OF VECTOR
    exp_orient : ARRAY[9] OF VECTOR
  BEGIN

    --colinear to theta axis (0 Deg)
    tangent = VEC(1,0,0)

    theta = 0
    act_orient[1] = pose__vector_to_euler_cylindrical(tangent, theta)
    exp_orient[1] = VEC(90,0,0)

    theta = 45
    act_orient[2] = pose__vector_to_euler_cylindrical(tangent, theta)
    exp_orient[2] = VEC(90,0,-45)

    theta = 90
    act_orient[3] = pose__vector_to_euler_cylindrical(tangent, theta)
    exp_orient[3] = VEC(90,0,-90)

    --45 deg to theta axis
    tangent = VEC(1,1,0)

    theta = 0
    act_orient[4] = pose__vector_to_euler_cylindrical(tangent, theta)
    exp_orient[4] = VEC(90,-45,0)

    theta = 90
    act_orient[5] = pose__vector_to_euler_cylindrical(tangent, theta)
    exp_orient[5] = VEC(90,-45,-90)

    theta = 135
    act_orient[6] = pose__vector_to_euler_cylindrical(tangent, theta)
    exp_orient[6] = VEC(90,-45,-135)

    --perpendicular to theta axis (90 deg)
    tangent = VEC(0,1,0)

    theta = 45
    act_orient[7] = pose__vector_to_euler_cylindrical(tangent, theta)
    exp_orient[7] = VEC(45,-90,0)

    theta = 90
    act_orient[8] = pose__vector_to_euler_cylindrical(tangent, theta)
    exp_orient[8] = VEC(0,-90,0)

    theta = 135
    act_orient[9] = pose__vector_to_euler_cylindrical(tangent, theta)
    exp_orient[9] = VEC(-45,-90,0)

    RETURN( kunit_eq_arv(exp_orient, act_orient, 0.2) )
  END t_cylvec


BEGIN
%ifdef DEBUG_BUILD
  --(log_filename, show_date, show_debug, show_info)
  usrdis__new(LOG_NAME, FALSE, TRUE, TRUE)
  usrdis__clear_file
%endif

  --asserts 36
  kunit_test('set_uframe()', t_set_uf) --assert 2
  kunit_test('set_uframe_group()', t_set_uf_grp) -- assert 2
  kunit_test('set_utool()', t_set_ut) -- assert 2
  kunit_test('set_utool_group()', t_set_ut_grp) --assert 2
  kunit_test('get_uframe()', t_get_uf) --assert 3
  kunit_test('get_utool()', t_get_ut) --assert 3

  kunit_test('set_joint()', t_set_joint) --assert 2
  kunit_test('set single axis', t_set_joint2) --assert 1
  kunit_test('set_xyz()', t_set_xyz) --assert 2
  kunit_test('set_pr_xyz()', t_set_prc) -- assert 2
  kunit_test('set_pr_joint()', t_set_prj) --assert 2
  kunit_test('find circumcenter', t_circum) --assert 4
  kunit_test('euclidean norm', t_dist) -- assert 1
  kunit_test('Calc frames from normal vectors', t_frm_nrml) -- assert 5
  kunit_test('Calc normal frame relative to parent frame', t_frm_nrml2) -- assert 1
  kunit_test('cylindrial conversions', t_cylind) -- assert 2
  kunit_test('vector to euler angles', t_veceul)
  kunit_test('cylindrical vector test', t_cylvec)
%ifeq TEST_ROBOT_KINEMATICS TRUE
  kunit_test('test IK', t_IK) -- assert 2
  kunit_test('test Kinematics', t_Kinematics) -- assert 2
%endif

  kunit_done

%ifdef DEBUG_BUILD
  usrdis__delete
%endif
END test_pose