PROGRAM test_pose
%NOBUSYLAMP
%COMMENT = ''
%NOLOCKGROUP

VAR
  entry : INTEGER
  status : INTEGER

%include pose.klt
%include pose_type.klt
--cell position type
path_type_define(kinpos)
%undef path_type_define

%include pose_structs.klt
%include common_poses.klt

%include pose.klh
%include math.klh
%from strings.klh %import i_to_s, s_to_vec
%include kunit.klh

--template for full kinematic model poses 
%class kinpos('pose.klc','pose_class.klh','pose_type.klt')
-- ** Need to add test for this class **

-- set frames
ROUTINE t_set_uf : BOOLEAN
  VAR
    b : BOOLEAN
    frame_no : INTEGER
    group_no : INTEGER
    expect : INTEGER
  BEGIN
    -- set uframe
    frame_no = 3

    -- test without group
    pose__set_userframe(frame_no, 0)
    b = pose__get_ok

    --get current frame number
    GET_VAR(entry, '*SYSTEM*', '$MNUFRAMENUM[1]', expect, status)

    RETURN(kunit_assert(b) AND kunit_eq_int(expect, frame_no))
  END t_set_uf

ROUTINE t_set_uf_grp : BOOLEAN
  VAR
    b : BOOLEAN
    frame_no : INTEGER
    group_no : INTEGER
    expect : INTEGER
  BEGIN
    -- set uframe
    frame_no = 2
    group_no = 1

    pose__set_userframe(frame_no, group_no)
    b = pose__get_ok

    --get current frame number
    GET_VAR(entry, '*SYSTEM*', '$MNUFRAMENUM['+i_to_s(group_no)+']', expect, status)

    RETURN(kunit_assert(b) AND kunit_eq_int(expect, frame_no))
  END t_set_uf_grp

ROUTINE t_set_ut : BOOLEAN
  VAR
    b : BOOLEAN
    frame_no : INTEGER
    group_no : INTEGER
    expect : INTEGER
  BEGIN
    -- set uframe
    frame_no = 1

    -- test without group
    pose__set_toolframe(frame_no, 0)
    b = pose__get_ok

    --get current frame number
    GET_VAR(entry, '*SYSTEM*', '$MNUTOOLNUM[1]', expect, status)

    RETURN(kunit_assert(b) AND kunit_eq_int(expect, frame_no))
  END t_set_ut

ROUTINE t_set_ut_grp : BOOLEAN
  VAR
    b : BOOLEAN
    frame_no : INTEGER
    group_no : INTEGER
    expect : INTEGER
  BEGIN
    -- set uframe
    frame_no = 1
    group_no = 1

    pose__set_toolframe(frame_no, group_no)
    b = pose__get_ok

    --get current frame number
    GET_VAR(entry, '*SYSTEM*', '$MNUTOOLNUM['+i_to_s(group_no)+']', expect, status)

    RETURN(kunit_assert(b) AND kunit_eq_int(frame_no, expect))
  END t_set_ut_grp

-- get uframe
ROUTINE t_get_uf : BOOLEAN
  VAR
    b : ARRAY[2] OF BOOLEAN
    frame : XYZWPR
    frame_no : INTEGER
    group_no : INTEGER
    actual : XYZWPR
  BEGIN
    -- set frame
    frame_no = 3
    group_no = 1
    pose__set_userframe(frame_no, group_no)
    b[1] = pose__get_ok

    IF NOT b[1] THEN
      RETURN(b[1])
    ENDIF

    -- get frame
    frame = pose__get_userframe(group_no)
    b[2] = pose__get_ok
    actual = $MNUFRAME[group_no, frame_no]

    RETURN(kunit_assert(b[1]) AND kunit_assert(b[2]) AND kunit_eq_pos(actual, frame))
  END t_get_uf

-- get utool
ROUTINE t_get_ut : BOOLEAN
  VAR
    b : ARRAY[2] OF BOOLEAN
    tool : XYZWPR
    tool_no : INTEGER
    group_no : INTEGER
    actual : XYZWPR
  BEGIN

    -- set frame
    tool_no = 1
    group_no = 1
    pose__set_toolframe(tool_no, group_no)

    b[1] = pose__get_ok
    IF NOT b[1] THEN
      RETURN(b[1])
    ENDIF

    tool = pose__get_toolframe(group_no)

    b[2] = pose__get_ok
    IF NOT b[2] THEN
      RETURN(b[2])
    ENDIF
    actual = $MNUTOOL[group_no, tool_no]

    RETURN(kunit_assert(b[1]) AND kunit_assert(b[2]) AND kunit_eq_pos(actual, tool))
  END t_get_ut

ROUTINE t_set_joint : BOOLEAN
  VAR
    pose : JOINTPOS6
    b  : BOOLEAN
    actual : ARRAY[6] OF REAL
    expected : ARRAY[6] OF REAL
  BEGIN
    -- set proper frame
    pose__set_toolframe(1, 1)
    pose__set_userframe(4, 1)
    -- set jointpos type
    expected[1] = 10.0
    expected[2] = 30.0
    expected[3] = 190.0
    expected[4] = -90.0
    expected[5] = 0.0
    expected[6] = 180.0
    
    pose = pose__set_jointpos(expected)

    b = pose__get_ok
    IF NOT b THEN
      RETURN(b)
    ENDIF

    -- check positions
    CNV_JPOS_REL(pose, actual, status)

    RETURN(kunit_assert(b) AND kunit_eq_arr(expected, actual))
  END t_set_joint

ROUTINE t_set_xyz : BOOLEAN
  VAR
    expected : XYZWPR
    actual : XYZWPR
    conf_str : STRING[25]
    arr : ARRAY[6] OF REAL
    b : BOOLEAN
  BEGIN
    -- set proper frame
    pose__set_toolframe(1, 1)
    pose__set_userframe(4, 1)

    --set position
    expected.x = 10.0
    expected.y = 30.0
    expected.z = 190.0
    expected.w = -90.0
    expected.p = 0.0
    expected.r = 180.0
    conf_str = 'F U T, 0, 0, 0'
    --convert to config type
    CNV_STR_CONF(conf_str, expected.config_data, STATUS)
    IF STATUS <> 0 THEN
      b = FALSE
      RETURN(FALSE)
    ENDIF

    -- set array
    arr[1] = 10.0
    arr[2] = 30.0
    arr[3] = 190.0
    arr[4] = -90.0
    arr[5] = 0.0
    arr[6] = 180.0

    actual = pose__set_xyzwpr(arr, conf_str)
    b = pose__get_ok

    RETURN(kunit_assert(b) AND kunit_eq_pos(expected, actual))
  END t_set_xyz

ROUTINE t_set_prc : BOOLEAN
  VAR
    expected : XYZWPR
    pr_num : INTEGER
    conf_str : STRING[25]
    grp_num : INTEGER
    STATUS : INTEGER
    b : BOOLEAN
    actual : XYZWPR
  BEGIN
    b = TRUE
    --set posreg number
    pr_num = 80
    grp_num = 1
    --set position
    expected.x = 10.0
    expected.y = 30.0
    expected.z = 190.0
    expected.w = -90.0
    expected.p = 0.0
    expected.r = 180.0
    conf_str = 'F U T, 0, 0, 0'
    --convert to config type
    CNV_STR_CONF(conf_str, expected.config_data, STATUS)
    IF STATUS <> 0 THEN
      WRITE TPDISPLAY('config conversion failure')
      b = FALSE
      RETURN(FALSE)
    ENDIF
    -- set pr
    pose__set_posreg_xyz(expected, pr_num, grp_num)
    b = pose__get_ok
    -- get pr for comparision
    actual = GET_POS_REG(pr_num, status, grp_num)
    IF STATUS <> 0 THEN
      WRITE TPDISPLAY('get PR failure')
      b = FALSE
      RETURN(FALSE)
    ENDIF

    RETURN(kunit_assert(b) AND kunit_eq_pos(expected, actual))

  END t_set_prc

ROUTINE t_set_prj : BOOLEAN
  VAR
    pr_num : INTEGER
    expected : ARRAY[6] OF REAL
    jpos_exp : JOINTPOS6
    jpos_act : JOINTPOS6
    b : BOOLEAN
  BEGIN
    pr_num = 49
    -- set jointpos type
    expected[1] = 10.0
    expected[2] = 30.0
    expected[3] = 190.0
    expected[4] = -90.0
    expected[5] = 0.0
    expected[6] = 180.0
    -- convert into jointpos form
    jpos_exp = pose__set_jointpos(expected)
    -- push jointpos to pr
    pose__set_posreg_joint(jpos_exp, pr_num, 0)
    -- check that functions completed
    b = pose__get_ok
    IF NOT b THEN
      RETURN(FALSE)
    ENDIF

    -- get pr for comparision
    jpos_act = GET_JPOS_REG(pr_num, status)
    IF STATUS <> 0 THEN
      RETURN(FALSE)
    ENDIF

    RETURN(kunit_assert(b) AND kunit_eq_jnt(jpos_exp, jpos_act))

  END t_set_prj

ROUTINE t_circum : BOOLEAN
  VAR
    circ, circ2 : T_CIRCLE
    expected, expected2 : T_CIRCLE
    p1,p2,p3 : VECTOR
    pose : XYZWPR
  BEGIN
    --simple case

    expected.radius = 300
    expected.center = s_to_vec('300,0,0',',')
    -- points at 0deg 135deg and 225deg
    p1 = s_to_vec('300,0,300',',')
    p2 = s_to_vec('300,212.130,-212.130',',')
    p3 = s_to_vec('300,-212.130,-212,130',',')

    circ = pose__find_circumcenter(p1, p2, p3)
    circ.radius = math__round(circ.radius)

    --complex case

    expected2.radius = 300
    -- center is pos(600,0,0,0,-45,0)
    -- world vec(424.264,0,424.264)
    pose = ZEROPOS(1)
    pose = math__translate(math__roty((pose),-45), s_to_vec('600,0,0',','))
    expected2.center = pose__pose_to_vector(pose)
    
    -- points at 0deg 90deg and -90deg
    p1 = s_to_vec('212.132,0,636.396',',')
    p2 = s_to_vec('424.264,300.000,424.264',',')
    p3 = s_to_vec('424.264,-300.000,424.264',',')

    circ2 = pose__find_circumcenter(p1, p2, p3)
    circ2.radius = math__round(circ2.radius)

    RETURN(kunit_eq_r(expected.radius, circ.radius) AND kunit_eq_vrl(expected.center, circ.center, 0.2) AND &
           kunit_eq_r(expected2.radius, circ2.radius) AND kunit_eq_vrl(expected2.center, circ2.center, 0.2))

  END t_circum


ROUTINE t_dist : BOOLEAN
  VAR
    pose: XYZWPR
    frm1, frm2: XYZWPR
  BEGIN
    --set up test pose
    pose = pose__set_xyzwpr_str('0,0,300,0,0,0', 'N D B, 0, 0, 0')
    -- frame 1
    frm1 = pose__set_xyzwpr_str('150,90,300,-25,15,0', 'N D B, 0, 0, 0')
    -- frame 2
    frm2 = pose__set_xyzwpr_str('150,90,300,0,0,0', 'N D B, 0, 0, 0')

    RETURN( kunit_eq_r(149.7437, pose__distance(frm1:pose, frm2:pose)) )

  END t_dist

ROUTINE t_frm_apr : BOOLEAN
  VAR
    origin, apr, apr2: VECTOR
    p1, p2: VECTOR
    actual, expected : XYZWPR
    actual2, expected2 : XYZWPR
    actual3, expected3 : XYZWPR
  BEGIN
    origin = s_to_vec('0,0,0',',')

    apr = s_to_vec('334,-300,398.048',',')
    actual = pose__frame_from_approach_vector(origin, apr)
    expected = pose__set_xyzwpr_str('0,0,0,30,40,0','N B D, 0, 0, 0')

    apr2 = s_to_vec('696.364,707.107,122.788',',')
    actual2 = pose__frame_from_approach_vector(origin, apr2)
    expected2 = pose__set_xyzwpr_str('0,0,0,-45,80,0','N B D, 0, 0, 0')

    p1 = s_to_vec('150,90,300',',')
    p2 = s_to_vec('337.656,428.095,1000.341',',')
    actual3 = pose__frame_from_approach_vector(p1, p2)
    expected3 = pose__set_xyzwpr_str('150,90,300,-25,15,0','N B D, 0, 0, 0')
  

    RETURN( kunit_eq_pos(expected, actual) AND kunit_eq_pos(expected2, actual2) AND &
            kunit_eq_pos(expected3, actual3) )
  END t_frm_apr

BEGIN
  --asserts 26
  kunit_test('set_uframe()', t_set_uf) --assert 2
  kunit_test('set_uframe_group()', t_set_uf_grp) -- assert 2
  kunit_test('set_utool()', t_set_ut) -- assert 2
  kunit_test('set_utool_group()', t_set_ut_grp) --assert 2
  kunit_test('get_uframe()', t_get_uf) --assert 3
  kunit_test('get_utool()', t_get_ut) --assert 3

  kunit_test('set_joint()', t_set_joint) --assert 2
  kunit_test('set_xyz()', t_set_xyz) --assert 2
  kunit_test('set_pr_xyz()', t_set_prc) -- assert 2
  kunit_test('set_pr_joint()', t_set_prj) --assert 2
  kunit_test('find circumcenter', t_circum) --assert 4
  kunit_test('euclidean norm', t_dist)
  kunit_test('Calc frame from approach', t_frm_apr) -- assert 3

  kunit_done
END test_pose