PROGRAM matrot
%NOBUSYLAMP
%COMMENT = ''
%UNINITVARS
%NOLOCKGROUP
%NOPAUSE = COMMAND + TPENABLE + ERROR

%include errors.klt
%include quaternion.klt

--matrix type
%include define_type.m
 -- 3 x 3
%include rotarr.klt
t_arr2d_ref(t_rows,t_columns,type_name,inner_type)


%from errors.klh %import CHK_STAT, karelError 
%from strings.klh %import i_to_s, r_to_s
%from kunit.klh %import kunit_eq_r
%include matrot.klh

--matrix class
%class crot('2dArray.klc','2dArray.klh','rotarr.klt')

--operations
ROUTINE matrot__rotx
  VAR
    row : arrx(type_name)
    out_mat : arry(type_name)
  BEGIN
    row[1] = 1 ; row[2] = 0 ; row[3] = 0
    crot__set_row(1, row, out_mat)
    row[1] = 0 ; row[2] = COS(angle) ; row[3] = -1*SIN(angle)
    crot__set_row(2, row, out_mat)
    row[1] = 0 ; row[2] = SIN(angle) ; row[3] = COS(angle)
    crot__set_row(3, row, out_mat)

    RETURN(out_mat)
  END matrot__rotx

ROUTINE matrot__roty
  VAR
    row : arrx(type_name)
    out_mat : arry(type_name)
  BEGIN
    row[1] = COS(angle) ; row[2] = 0 ; row[3] = SIN(angle)
    crot__set_row(1, row, out_mat)
    row[1] = 0 ; row[2] = 1 ; row[3] = 0
    crot__set_row(2, row, out_mat)
    row[1] = -1*SIN(angle) ; row[2] = 0 ; row[3] = COS(angle)
    crot__set_row(3, row, out_mat)

    RETURN(out_mat)
  END matrot__roty

ROUTINE matrot__rotz
  VAR
    row : arrx(type_name)
    out_mat : arry(type_name)
  BEGIN
    row[1] = COS(angle) ; row[2] = -1*SIN(angle) ; row[3] = 0
    crot__set_row(1, row, out_mat)
    row[1] = SIN(angle) ; row[2] = COS(angle) ; row[3] = 0
    crot__set_row(2, row, out_mat)
    row[1] = 0 ; row[2] = 0 ; row[3] = 1
    crot__set_row(3, row, out_mat)

    RETURN(out_mat)
  END matrot__rotz

--conversions
ROUTINE matrot__pose_to_mat
  VAR
    ca, cb, cc : REAL
    sa, sb, sc : REAL
    row : arrx(type_name)
  BEGIN
    ca = COS(pose.x)
    sa = SIN(pose.x)
    cb = COS(pose.y)
    sb = SIN(pose.y)
    cc = COS(pose.z)
    sc = SIN(pose.z)

    row[1] = cb*cc ; row[2] = cc*sa*sb - ca*sc ; row[3] = sa*sc + ca*cc*sb 
    crot__set_row(1, row, out_mat)
    row[1] = cb*sc ; row[2] = ca*cc + sa*sb*sc ; row[3] = ca*sb*sc - cc*sa
    crot__set_row(2, row, out_mat)
    row[1] = -sb ; row[2] = cb*sa ; row[3] = ca*cb
    crot__set_row(3, row, out_mat)
    
  END matrot__pose_to_mat

ROUTINE matrot__mat_to_pose
  VAR
%define EPSILON 0.0001
    out_pose : VECTOR
  BEGIN
    --rotation
    IF (mat[3,1] > (1.0 - EPSILON)) THEN
      out_pose.x = 0
      out_pose.y = -90.0
      IF (mat[2,2] = 0) AND (mat[2,3] = 0) THEN out_pose.z = 0 ;
      ELSE out_pose.z = ATAN2(mat[2,2], -1*mat[2,3]) ; ENDIF
    ELSE IF (mat[3,1] < (-1.0 + EPSILON)) THEN
      out_pose.x = 0
      out_pose.y = 90.0
      IF (mat[2,2] = 0) AND (mat[2,3] = 0) THEN out_pose.z = 0 ;
      ELSE out_pose.z = ATAN2(mat[2,2], 1*mat[2,3]) ; ENDIF
    ELSE
      IF (mat[3,3] = 0) AND (mat[3,2] = 0) THEN out_pose.x = 0 ;
      ELSE out_pose.x = ATAN2(mat[3,3], mat[3,2]) ; ENDIF

      IF (mat[1,1] = 0) AND (mat[2,1] = 0) AND (mat[3,1] = 0) THEN out_pose.y = 0 ;
      ELSE out_pose.y = ATAN2(SQRT(mat[1,1]*mat[1,1]+mat[2,1]*mat[2,1]), -1*mat[3,1]) ; ENDIF

      IF (mat[1,1] = 0) AND (mat[2,1] = 0) THEN out_pose.z = 0 ;
      ELSE out_pose.z = ATAN2(mat[1,1], mat[2,1]) ; ENDIF
    ENDIF
    ENDIF 
    
    RETURN(out_pose)
  END matrot__mat_to_pose

--quaternions
ROUTINE matrot__set_quant
  VAR
    out : T_QUAT
  BEGIN
    out.x = w ; out.x = x ; out.y = y ; out.z = z;
    RETURN(out)
  END matrot__set_quant


ROUTINE matrot__quat_normalize
  VAR
    out_quat : T_QUAT
    norm :REAL
  BEGIN
    norm = SQRT(q.w*q.w + q.x*q.x + q.y*q.y + q.z*q.z)

    out_quat.w = q.w/norm
    out_quat.x = q.x/norm
    out_quat.y = q.y/norm
    out_quat.z = q.z/norm

    RETURN(out_quat)
  END matrot__quat_normalize

ROUTINE matrot__quat_mult
  VAR
    outq : T_QUAT
  BEGIN
    outq.w = q1.w*q2.w - q1.x*q2.x - q1.y*q2.y - q1.z*q2.z
    outq.x = q1.w*q2.x + q1.x*q2.w + q1.y*q2.z - q1.z*q2.y
    outq.y = q1.w*q2.y - q1.x*q2.z + q1.y*q2.w + q1.z*q2.x
    outq.z = q1.w*q2.z + q1.x*q2.y - q1.y*q2.x + q1.z*q2.w

    RETURN(outq)
    
  END matrot__quat_mult


--quaternions conversion

ROUTINE max_val_(v1, v2 : inner_type) : inner_type
  BEGIN
    IF v1 > v2 THEN
      RETURN(v1)
    ENDIF

    RETURN(v2)
  END max_val_ 

ROUTINE matrot__mat_to_quat
  VAR
    sign2, sign3, sign4 : INTEGER
    q : T_QUAT
  BEGIN
    sign2 = 1; sign3 = 1; sign4 = 1;

    IF (mat[3,2]-mat[2,3] < 0) THEN sign2 = -1; ENDIF
    IF (mat[1,3]-mat[3,1] < 0) THEN sign3 = -1; ENDIF
    IF (mat[2,1]-mat[1,2] < 0) THEN sign4 = -1; ENDIF

    q.w = SQRT(max_val_(mat[1,1]+mat[2,2]+mat[3,3]+1, 0))/2
    q.x = sign2*SQRT(max_val_(mat[1,1]-mat[2,2]-mat[3,3]+1, 0))/2
    q.y = sign3*SQRT(max_val_(-1*mat[1,1]+mat[2,2]-mat[3,3]+1, 0))/2
    q.z = sign4*SQRT(max_val_(-1*mat[1,1]-mat[2,2]+mat[3,3]+1, 0))/2

    RETURN(q)
  END matrot__mat_to_quat

ROUTINE matrot__quat_to_mat
  VAR
    qnorm : T_QUAT
  BEGIN
    qnorm = matrot__quat_normalize(q)

    out_mat[1,1] = 1-2*q.y*q.y - 2*q.z*q.z ; out_mat[1,2] = 2*q.x*q.y - 2*q.z*q.w ; out_mat[1,3] = 2*q.x*q.z + 2*q.y*q.w 
    out_mat[2,1] = 2*q.x*q.y + 2*q.z*q.w ; out_mat[2,2] = 1-2*q.x*q.x - 2*q.z*q.z ; out_mat[2,3] = 2*q.y*q.z - 2*q.x*q.w 
    out_mat[3,1] = 2*q.x*q.z - 2*q.y*q.w ; out_mat[3,2] = 2*q.y*q.z + 2*q.x*q.w ; out_mat[3,3] = 1-2*q.x*q.x - 2*q.y*q.y

  END matrot__quat_to_mat

ROUTINE matrot__pose_to_quat
  VAR
    c : VECTOR
    s : VECTOR
    outq : T_QUAT
  BEGIN
    c.x = COS(p.x*0.5)
    s.x = SIN(p.x*0.5)
    c.y = COS(p.y*0.5)
    s.y = SIN(p.y*0.5)
    c.z = COS(p.z*0.5)
    s.z = SIN(p.z*0.5)

    outq.w = c.x*c.y*c.z + s.x*s.y*s.z
    outq.x = s.x*c.y*c.z - c.x*s.y*s.z
    outq.y = c.x*s.y*c.z + s.x*c.y*s.z
    outq.z = c.x*c.y*s.z - s.x*s.y*c.z

    RETURN(outq)

  END matrot__pose_to_quat

ROUTINE matrot__quat_to_pose
  VAR
    out : VECTOR
    x, y : REAL
  BEGIN

    x = 1-2*(q.x*q.x + q.y*q.y) ; y = 2*(q.w*q.x + q.y*q.z)
    IF (x = 0) AND (y = 0) THEN out.x = 0 ;
    ELSE out.x = ATAN2(x, y) ; ENDIF

    x = SQRT(1-2*(q.w*q.y - q.x*q.z)) ; y = SQRT(1+2*(q.w*q.y - q.x*q.z))
    IF (x = 0) AND (y = 0) THEN out.y = 0 ;
    ELSE out.y = -90 + 2*ATAN2(x, y) ; ENDIF

    x = 1-2*(q.y*q.y+q.z*q.z) ; y = 2*(q.w*q.z + q.y*q.x)
    IF (x = 0) AND (y = 0) THEN out.z = 0 ;
    ELSE out.z = ATAN2(x, y) ; ENDIF

    RETURN(out)
  END matrot__quat_to_pose

BEGIN
END matrot