PROGRAM matpose
%NOBUSYLAMP
%COMMENT = ''
%UNINITVARS
%NOLOCKGROUP
%NOPAUSE = COMMAND + TPENABLE + ERROR

%include errors.klt

--matrix type
%include define_type.m
 -- 4 x 4
%include matarr.klt
t_arr2d_ref(t_rows,t_columns,type_name,inner_type)


%from errors.klh %import CHK_STAT, karelError 
%from strings.klh %import i_to_s, r_to_s
%include matpose.klh

--matrix class
%ifdef DEBUG_BUILD
 -- use for testing
%class cmat('2dArray.klc','2dArray.klh','matarr_test.klt')
%else
 -- use for production
%class cmat('2dArray.klc','2dArray.klh','matarr.klt')
%endif

--operations
ROUTINE matpose__rotx
  VAR
    row : arrx(type_name)
    out_mat : arry(type_name)
  BEGIN
    row[1] = 1 ; row[2] = 0 ; row[3] = 0 ; row[4] = 0
    cmat__set_row(1, row, out_mat)
    row[1] = 0 ; row[2] = COS(angle) ; row[3] = -1*SIN(angle) ; row[4] = 0
    cmat__set_row(2, row, out_mat)
    row[1] = 0 ; row[2] = SIN(angle) ; row[3] = COS(angle) ; row[4] = 0
    cmat__set_row(3, row, out_mat)
    row[1] = 0 ; row[2] = 0 ; row[3] = 0 ; row[4] = 1
    cmat__set_row(4, row, out_mat)

    RETURN(out_mat)
  END matpose__rotx

ROUTINE matpose__roty
  VAR
    row : arrx(type_name)
    out_mat : arry(type_name)
  BEGIN
    row[1] = COS(angle) ; row[2] = 0 ; row[3] = SIN(angle) ; row[4] = 0
    cmat__set_row(1, row, out_mat)
    row[1] = 0 ; row[2] = 1 ; row[3] = 0 ; row[4] = 0
    cmat__set_row(2, row, out_mat)
    row[1] = -1*SIN(angle) ; row[2] = 0 ; row[3] = COS(angle) ; row[4] = 0
    cmat__set_row(3, row, out_mat)
    row[1] = 0 ; row[2] = 0 ; row[3] = 0 ; row[4] = 1
    cmat__set_row(4, row, out_mat)

    RETURN(out_mat)
  END matpose__roty

ROUTINE matpose__rotz
  VAR
    row : arrx(type_name)
    out_mat : arry(type_name)
  BEGIN
    row[1] = COS(angle) ; row[2] = -1*SIN(angle) ; row[3] = 0 ; row[4] = 0
    cmat__set_row(1, row, out_mat)
    row[1] = SIN(angle) ; row[2] = COS(angle) ; row[3] = 0 ; row[4] = 0
    cmat__set_row(2, row, out_mat)
    row[1] = 0 ; row[2] = 0 ; row[3] = 1 ; row[4] = 0
    cmat__set_row(3, row, out_mat)
    row[1] = 0 ; row[2] = 0 ; row[3] = 0 ; row[4] = 1
    cmat__set_row(4, row, out_mat)

    RETURN(out_mat)
  END matpose__rotz

ROUTINE matpose__transl
  VAR
    row : arrx(type_name)
    out_mat : arry(type_name)
  BEGIN
    row[1] = 1 ; row[2] = 0 ; row[3] = 0 ; row[4] = x
    cmat__set_row(1, row, out_mat)
    row[1] = 0 ; row[2] = 1 ; row[3] = 0 ; row[4] = y
    cmat__set_row(2, row, out_mat)
    row[1] = 0 ; row[2] = 0 ; row[3] = 1 ; row[4] = z
    cmat__set_row(3, row, out_mat)
    row[1] = 0 ; row[2] = 0 ; row[3] = 0 ; row[4] = 1
    cmat__set_row(4, row, out_mat)

    RETURN(out_mat)
  END matpose__transl

--conversions
ROUTINE matpose__pose_to_mat
  VAR
    ca, cb, cc : REAL
    sa, sb, sc : REAL
    row : arrx(type_name)
  BEGIN
    ca = COS(pose.w)
    sa = SIN(pose.w)
    cb = COS(pose.p)
    sb = SIN(pose.p)
    cc = COS(pose.r)
    sc = SIN(pose.r)

    row[1] = cb*cc ; row[2] = cc*sa*sb - ca*sc ; row[3] = sa*sc + ca*cc*sb ; row[4] = pose.x
    cmat__set_row(1, row, out_mat)
    row[1] = cb*sc ; row[2] = ca*cc + sa*sb*sc ; row[3] = ca*sb*sc - cc*sa ; row[4] = pose.y
    cmat__set_row(2, row, out_mat)
    row[1] = -sb ; row[2] = cb*sa ; row[3] = ca*cb ; row[4] = pose.z
    cmat__set_row(3, row, out_mat)
    row[1] = 0 ; row[2] = 0 ; row[3] = 0 ; row[4] = 1
    cmat__set_row(4, row, out_mat)
    
  END matpose__pose_to_mat

ROUTINE matpose__mat_to_pose
  VAR
%define EPSILON 0.0001
    out_pose : XYZWPR
  BEGIN
    --position
    out_pose.x = mat[1,4]
    out_pose.y = mat[2,4]
    out_pose.z = mat[3,4]
    --rotation
    IF (mat[3,1] > (1.0 - EPSILON)) THEN
      out_pose.w = 0
      out_pose.p = -90.0
      IF (mat[2,2] = 0) AND (mat[2,3] = 0) THEN out_pose.r = 0 ;
      ELSE out_pose.r = ATAN2(mat[2,2], -1*mat[2,3]) ; ENDIF
    ELSE IF (mat[3,1] < (-1.0 + EPSILON)) THEN
      out_pose.w = 0
      out_pose.p = 90.0
      IF (mat[2,2] = 0) AND (mat[2,3] = 0) THEN out_pose.r = 0 ;
      ELSE out_pose.r = ATAN2(mat[2,2], 1*mat[2,3]) ; ENDIF
    ELSE
      IF (mat[3,3] = 0) AND (mat[3,2] = 0) THEN out_pose.w = 0 ;
      ELSE out_pose.w = ATAN2(mat[3,3], mat[3,2]) ; ENDIF

      IF (mat[1,1] = 0) AND (mat[2,1] = 0) AND (mat[3,1] = 0) THEN out_pose.p = 0 ;
      ELSE out_pose.p = ATAN2(SQRT(mat[1,1]*mat[1,1]+mat[2,1]*mat[2,1]), -1*mat[3,1]) ; ENDIF

      IF (mat[1,1] = 0) AND (mat[2,1] = 0) THEN out_pose.r = 0 ;
      ELSE out_pose.r = ATAN2(mat[1,1], mat[2,1]) ; ENDIF
    ENDIF
    ENDIF 
    
    RETURN(out_pose)
  END matpose__mat_to_pose

BEGIN
END matpose